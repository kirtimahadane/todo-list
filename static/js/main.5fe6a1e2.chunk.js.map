{"version":3,"sources":["firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Todo","props","useState","open","setOpen","input","setInput","className","todo","value","placeholder","onChange","e","target","onClick","collection","doc","id","set","merge","event","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAYgBA,EAVEC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAEaC,Y,OC+CPC,EAnDF,SAACC,GAEd,MAAqBC,oBAAS,GAA9B,mBAAMC,EAAN,KAAYC,EAAZ,KACC,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAcC,EAAd,KAaC,OACE,mCAEJ,sBAAKC,UAAW,OAAhB,UAEM,4BACCN,EAAMO,KAAKA,QAKF,IAARL,EAEP,sBAAKI,UAAU,cAAf,UAEC,uBAAOE,MAAOJ,EAAOK,YAAaT,EAAMO,KAAKA,KAAMG,SAAU,SAACC,GAAD,OAAKN,EAASM,EAAEC,OAAOJ,UAErF,wBAAQK,QA1BU,WAEfxB,EAAGyB,WAAW,SAASC,IAAIf,EAAMO,KAAKS,IAAIC,IAAI,CAC5CV,KAAKH,GACL,CAACc,OAAM,IACTf,GAAQ,IAqBX,4BAGC,sBAAKG,UAAU,MAAf,UACF,cAAC,IAAD,CAAQO,QAAS,SAACF,GAAD,OAAKR,GAAQ,MAExB,cAAC,IAAD,CAAYU,QAAS,SAAAM,GAAK,OAAE9B,EAAGyB,WAAW,SAASC,IAAIf,EAAMO,KAAKS,IAAII,qBCU7DC,EAhDH,WACV,MAAwBpB,mBAAS,IAAjC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAuBtB,mBAAS,IAAhC,mBAAMG,EAAN,KAAaC,EAAb,KACAmB,qBAAU,WACRnC,EAAGyB,WAAW,SAASW,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE5DJ,EAASI,EAASC,KAAKC,KAAI,SAAAd,GAAG,MAAG,CAACC,GAAGD,EAAIC,GAAIT,KAAKQ,EAAIe,OAAOvB,eAE9D,IAaH,OACE,sBAAKD,UAAU,MAAf,UACE,gDACA,iCAEJ,uBAAOyB,KAAK,OACXvB,MAAOJ,EACRM,SAAU,SAACC,GAAD,OAAKN,EAASM,EAAEC,OAAOJ,UAEnC,wBAAQuB,KAAK,SAASlB,QApBN,SAACM,GACbA,EAAMa,iBACN3C,EAAGyB,WAAW,SAASmB,IAAI,CACzB1B,KAAKH,EACL8B,UAAU5C,IAASQ,UAAUqC,WAAWC,oBAK1C/B,EAAS,KAW2BgC,UAAWjC,EAAnD,kBAII,qBAAKE,UAAU,QAAf,SACGgB,EAAMO,KAAI,SAAAtB,GAAI,OACX,cAAC,EAAD,CAAMA,KAAMA,aC/BP+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5fe6a1e2.chunk.js","sourcesContent":["\r\nimport firebase from \"firebase\";\r\nconst firebaseApp=firebase.initializeApp({\r\n  apiKey: \"AIzaSyA9Xi0iUnMGMzg7XwhT_VaIvFywxuhz0n4\",\r\n  authDomain: \"my-todos-96e37.firebaseapp.com\",\r\n  projectId: \"my-todos-96e37\",\r\n  storageBucket: \"my-todos-96e37.appspot.com\",\r\n  messagingSenderId: \"410049377900\",\r\n  appId: \"1:410049377900:web:9f314f61c7e54ed795ca49\"\r\n});\r\nconst db= firebaseApp.firestore();\r\n\r\nexport  default db ; ","import React, {useState} from 'react';\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport db from './firebase';\r\n\r\n\r\nconst Todo = (props) => {\r\n\r\nconst[open, setOpen]=useState(false)\r\n const [input, setInput]=useState(\"\")\r\n  const handleClose=()=>{\r\n    setOpen(false)\r\n  }\r\n  const updateTodo=()=>{\r\n    //update todo with new input text\r\n    db.collection('todos').doc(props.todo.id).set({\r\n      todo:input\r\n    },{merge:true})\r\n    setOpen(false);\r\n  }\r\n \r\n\r\n  return (\r\n    <>\r\n      \r\n<div className= \"todo\">\r\n      \r\n      <p>\r\n      {props.todo.todo}\r\n      </p>\r\n \r\n    \r\n\r\n      { open ===true? \r\n     \r\n(<div className=\"modal-inner\">\r\n  \r\n  <input value={input} placeholder={props.todo.todo} onChange={(e)=>setInput(e.target.value)}/>\r\n \r\n <button onClick={updateTodo}>Update Todo</button>\r\n\r\n</div>):(\r\n  <div className=\"one\">\r\n<FaEdit onClick={(e)=>setOpen(true) }></FaEdit>\r\n      \r\n      <FaTrashAlt onClick={event=>db.collection('todos').doc(props.todo.id).delete()}></FaTrashAlt> \r\n      </div>)\r\n      }\r\n\r\n   </div>\r\n</>\r\n  )\r\n\r\n       \r\n  \r\n}\r\n\r\nexport default Todo\r\n","import React, { useState, useEffect } from 'react';\n\nimport Todo from './Todo';\nimport firebase from 'firebase';\nimport db from './firebase';\n\n \nconst App = () => {\n  const [todos, setTodos]=useState([]);\n  const[input, setInput]=useState(\"\");\n  useEffect(()=>{\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n   \n      setTodos(snapshot.docs.map(doc=>({id:doc.id, todo:doc.data().todo})))\n    })\n  }, [])\n  // when the app loads we need to fetch todos from the database as they get added/ removed\n  const addTodo=(event)=>{\n    event.preventDefault();\n    db.collection('todos').add({\n      todo:input,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n      \n    })\n \n  //setTodos([...todos, input]);\n    setInput(\"\");\n  }\n  return (\n    <div className=\"app\">\n      <h1> Todo List App</h1>\n      <form >\n        \n  <input type=\"text\"\n   value={input} \n  onChange={(e)=>setInput(e.target.value)}\n  />\n<button type=\"submit\" onClick={addTodo} disabled={!input}>+</button>\n  \n      </form>\n  \n    <div className=\"todos\">\n      {todos.map(todo=>\n          <Todo todo={todo}/> \n         \n     \n    )\n    }\n    </div>\n        \n\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}